1.类的命名空间：
下面两条语句大致等价：
def foo(x): return x * x
foo = lambda x: x * x
它们都创建一个返回参数平方的函数，并将这个函数关联到变量foo，可以在全局（模块）作用域内定义名称foo，也可以在函数或者方法内定义。定义类的时候情况也是这样：在class语句中定义的代码都是在一个特殊的命名空间（类的命名空间）内执行的，而类的所有成员都可访问这个命名空间。
下述代码在类作用域内定义了一个变量，所有的成员都可访问它，这里使用它来计算类实例的数量：
class MemberCounter:
   members = 0
   def init(self):
      MemberCounter.members += 1
>>> m1 = MemberCounter()
>>> m1.init()
>>> MemberCounter.members
1
>>> m2 = MemberCounter()
>>> m2.init()
>>> MemberCounter.members
2
每个实例都可以访问这个类作用域内的变量，就像方法一样：
>>> m1.members
2
>>> m2.members
2
如果在一个实例中给属性members赋值，结果如下：
>>> m1.members = ‘Two’
>>> m1.members
‘Two’
>>> m2.members
2
新值被写入m1的一个属性中，这个属性遮住了类级变量。
2.指定超类：
要指定超类，可以在class语句中的类名后加上超类名，并将其用圆括号括起，如：
class Filter:
   def init(self):
      self.blocked = [ ]
   def filter(self,sequence):
      return [x for x in sequence if x not in self.blocked]
class SPAMFilter(Filter):
   def init(self):
      self.blocked = [‘SPAM’]
其中，Filter是一个过滤序列的通用类。而实际上，它不会过滤掉任何东西：
>>> f = Filter()
>>> f.init()
>>> f.filter([1,2,3])
[1,2,3]
Filter类的用途在于可用作其他类（如将‘SPAM’从序列中过滤掉的SPAMFilter类）的基类（超类）：
>>> s = SPAMFiler()
>>> s.init()
>>> s.filter([‘SPAM’, ‘SPAM’, ‘SPAM’, ‘SPAM’,’eggs’,’bacon’, ‘SPAM’])
[‘eggs’,’bacon’]
需要注意的是SPAMFilter类的定义中有两个要点：
（1）以提供新定义的方式重写了Filter类中方法init的定义
（2）直接从Filter类继承了方法filter的定义，因此无需重新编写其定义
