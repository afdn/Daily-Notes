1.一些迭代工具：
(1)并行迭代
假如有以下两个列表：
names=[‘anna’,’beth’,’george’,’damon’]
ages=[12,45,32,102]
如果要打印名字和对应的年龄，可以这样做：
for i in range(len(names)):
   print(names[i], ’is’,ages[i], ’years old’)
其中i是用作循环索引的变量的标准名称。另外，zip是一个很有用的并行迭代工具，它将两个序列“缝合”起来，并返回一个由元组组成的序列，如果要查看返回值，可以用list将它转换为列表，如：
>>>list(zip(names,ages))
[(‘anna’,12),(‘beth’,45),(‘george’,32),(‘damon’,102)
对于“缝合”后的序列，可在循环中解包：
for name,age in zip(names,ages):
   print(name, ‘is’, age, ‘years old’)
要注意的是，当序列的长度不同的时候，zip将会在最短的序列用完之后停止“缝合”，如：
>>>list(zip(range(5),range(100000000)))
[(0,0),(1,1),(2,2),(3,3),(4,4)]
(2)迭代时获取索引
当需要在迭代对象序列的同时获取当前对象的索引，一种比较好的解决方案：
index=0
for string in strings:
   if ‘xxx’ in string:
     strings[index]=’[censored]’
   index +=1
另一种更好的解决方法是：
for index, string in enumerate(strings):
   if ‘xxx’ in string:
     strings[index]=’[censored]’
这个函数能够在迭代索引—值时自动提供索引
(3)反向迭代和排序后再迭代
reversed和sorted，类似于列表方法reserve和sort,但是可用于任何序列或可迭代的对象，并且返回的是反转和排序后的版本：
>>>sorted([4,3,6,8,3])
[3,3,4,6,8]
>>>sorted(‘Hello, world!’)
[‘ ‘,’!’,’,’,’H’,’d’,’e’,’l’,’l’,’l’,’o’,’o’,’r’,’w’]
>>>list(reversed(‘Hello, world!’))
[‘!’,’d’,’l’,’r’,’o’,’w’,’ ‘,’,’,’o’,’l’,’l’,’e’,’H’]
>>>’ ‘.join(reversed(‘Hello, world!’))
‘!dlrow ,olleH’
要注意，sorted返回的是一个列表，而reversed返回的是可迭代对象，如果要对它执行索引或切片等操作，可以先使用list对返回的对象进行转换。
2.如果想要在使用了break的循环中判断循环是否提前结束，可以在循环语句后使用一条if语句，如：
borke_out=False
for x in seq:
   do_something(x)
   if condition(x):
      broke_out=True
      break
   do_something_else(x)
if not broke_out:
   print(“I didn’t break out!”)
还有一种更为简单的方法，即在循环中添加一条else子句，它仅在没有调用break时才执行：
from math import sqrt
for n in range(99,81,-1):
   root=sqrt(n)
   if root==int(root):
     print(n)
     break
else:
   print(“Didn’t find it!”)
